{
    "title": "合并配置项",
    "desc": "### 题目描述\n\n你使用过 Sublime Text 或者 VS Code 等代码编辑器吗？它们都把配置项分成了默认配置项和用户配置项。如果用户配置了某一项则使用用户的配置，否则使用默认的配置。\n\n很容易想到使用字典先存默认配置再更新用户配置可以完成这个功能。但是如果现在删除了某项用户配置，如何更新呢？从默认配置项中查找？如果现在又加入了一个工作区的配置（工作区配置的优先级大于用户）呢？\n\n请你学习 collections 的 [ChainMap](https://docs.python.org/zh-cn/3/library/collections.html#collections.ChainMap) 和 [OrderedDict](https://docs.python.org/zh-cn/3/library/collections.html#collections.OrderedDict)，并使用 ChainMap 来实现多级配置项。\n\n### 输入描述\n\n输入包括五行。\n\n第一到三行分别为默认、用户和工作区的配置项字典。优先级 工作区 > 用户 > 默认。\n\n第四行为一个配置项 i 的键值，第五行为一个配置项 j 的键值。\n\n### 输出描述\n\n输出两行。\n\n第二行为删除配置项 i 后，第 i 项的值。\n\n第三行为删除配置项 j 后，第 j 项的值。\n\n具体输出格式请参考测试样例。\n\n### 测试样例\n\n#### 样例1: 输入-输出\n\n```\n{ 'font': 'Consolas', 'autoIndent': True}\n{ 'font': 'Hack', 'autoIndent': False}\n{ 'autoIndent': True}\nautoIndent\nautoIndent\n```\n\n```\nFalse\nTrue\n```\n\n### 说明\n\n本题假设配置项优先从优先级更高的配置开始删除，尽管这不符合实际情况。\n",
    "templateCode": "",
    "sourceCode": "from collections import OrderedDict\nfrom collections import ChainMap\n\nclass DeepChainMap(ChainMap):\n    def __setitem__(self, key, value):\n        for mapping in self.maps:\n            if key in mapping:\n                mapping[key] = value\n                return\n        self.maps[0][key] = value\n\n    def __delitem__(self, key):\n        for mapping in self.maps:\n            if key in mapping:\n                del mapping[key]\n                return\n        raise KeyError(key)\n\ndefault = eval(input())\nuser = eval(input())\nworkspace = eval(input())\nsettings = DeepChainMap(workspace, user, default)\ni = input()\ndel settings[i]\nprint(settings[i])\ni = input()\ndel settings[i]\nprint(settings[i])",
    "lang": "Python3",
    "testCases": [
        {
            "input": "{ 'font': 'Consolas', 'autoIndent': True}\n{ 'font': 'Hack', 'autoIndent': False}\n{ 'autoIndent': True}\nautoIndent\nautoIndent\n",
            "output": "False\nTrue\n"
        },
        {
            "input": "{ 'font': 'Consolas', 'autoIndent': True, 'cursorStyle': 'line', 'autoSave': True}\n{ 'font': 'Hack', 'autoIndent': False}\n{ 'autoIndent': True, 'autoSave': False}\nautoIndent\nfont\n",
            "output": "False\nConsolas\n"
        },
        {
            "input": "{ 'font': 'Consolas', 'autoIndent': True, 'cursorStyle': 'line', 'autoSave': True}\n{ 'font': 'Hack', 'autoIndent': False}\n{ 'autoIndent': True, 'autoSave': False}\nautoIndent\nautoSave\n",
            "output": "False\nTrue\n"
        }
    ],
    "simple_desc": "使用ChainMap来合并配置项",
    "difficulty": "2",
    "tag": "collections-ChainMap",
    "author": "谢子聪"
}