{
    "title": "自定义列表",
    "desc": "### 题目描述\n\n请学习 collections 的 [UserList](https://docs.python.org/zh-cn/3/library/collections.html#collections.UserList) 并实现一个自动扩展的列表类，当访问下标超过列表长度时，自动扩展列表长度，扩展的数据使用 0 代替。\n\n### 输入描述\n\n第一行为一个初始整数列表 L。\n\n第二行为两个整数 i 和 x，分别表示需要插入的下标和需要插入的数据。\n\n第三行为一个整数 j，表示需要访问的下标。\n\n### 输出描述\n\n输出分为两行。\n\n第一行为在列表第 i+1 项放入 x 后的列表。\n\n第二行为列表第 j+1 项的值。\n\n### 测试样例\n\n#### 样例1: 输入-输出-解释\n\n```\n[0, 1]\n4 2\n3\n```\n\n```\n[0, 1, 0, 0, 2]\n0\n```\n\n```\nL = [0, 1]，现在需要设置 L[4] = 2，那么你的列表将自动扩展为 L = [0, 1, 0, 0, 2]。\n```\n\n",
    "templateCode": "from collections import UserList\n\nclass AutoList(UserList):\n\n    def __setitem__(self, i, item):\n        # TODO\n\n    def __getitem__(self, i):\n        # TODO\n\nL = AutoList(eval(input()))\ni, x = map(int, input().split())\nL[i] = x\nprint(L)\nprint(L[int(input())])",
    "sourceCode": "from collections import UserList\n\nclass AutoList(UserList):\n\n    def __setitem__(self, i, item):\n        if i >= len(self.data):\n            self.data += [0] * (i - len(self.data) + 1)\n        self.data[i] = item\n\n    def __getitem__(self, i):\n        if i < len(self.data):\n            return self.data[i]\n        else: return 0\n\nL = AutoList(eval(input()))\ni, x = map(int, input().split())\nL[i] = x\nprint(L)\nprint(L[int(input())])",
    "lang": "Python3",
    "testCases": [
        {
            "input": "[0, 1]\n4 2\n3\n",
            "output": "[0, 1, 0, 0, 2]\n0\n"
        },
        {
            "input": "[0, 1, 2]\n1 2\n10\n",
            "output": "[0, 2, 2]\n0\n"
        },
        {
            "input": "[0, 1]\n10 3\n10\n",
            "output": "[0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 3]\n3\n"
        }
    ]
}