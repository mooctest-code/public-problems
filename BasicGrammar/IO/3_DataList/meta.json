{
    "title": "\u8bfb\u53d6\u548c\u8f93\u51fa\u4e00\u4e2a\u6570\u7ec4",
    "desc": "### \u9898\u76ee\u63cf\u8ff0\n\n\u5728\u4e0a\u4e00\u9898\u4e2d\uff0c\u6211\u4eec\u8bfb\u53d6\u548c\u8f93\u51fa\u4e86\u4e00\u884c\u4e2d\u7684\u51e0\u4e2a\u6570\u636e\uff0c\u6570\u91cf\u5c11\uff0c\u5355\u72ec\u5bf9\u6bcf\u4e00\u4e2a\u6570\u636e\u8fdb\u884c\u8bfb\u53d6\u548c\u8f93\u51fa\u662f\u65b9\u4fbf\u7684\uff0c\u4f46\u662f\u5982\u679c\u6570\u91cf\u53d8\u591a\u4e86\u5462\uff0c\u5982\u679c\u6ca1\u6709\u8bf4\u660e\u6570\u91cf\u5462\uff1f\n\n### \u8f93\u5165\u63cf\u8ff0\n\n> \u9ed8\u8ba4 \u201c\u6570\u7ec4\u201d \u548c \u201c\u5217\u8868\u201d \u8868\u793a\u7684\u662f\u4e00\u4e2a\u610f\u601d\uff0c\u90fd\u662f\u6307\u4e00\u7ec4\u6570\u636e\u3002\n\n\u7b2c\u4e00\u884c\u662f\u4e00\u4e2a\u6b63\u6574\u6570 N (0 < N < 30)\uff0c\u8868\u793a\u6570\u7ec4\u7684\u957f\u5ea6\n\n\u7b2c\u4e8c\u884c\u662f\u6570\u7ec4 A\uff0c\u6709 N \u4e2a\u6d6e\u70b9\u6570\uff0c\u4e24\u4e24\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\n\n\u7b2c\u4e09\u884c\u662f\u6570\u7ec4 B\uff0c\u6709 M \u4e2a\u6574\u6570\uff0cM \u672a\u77e5\u4f46\u5c0f\u4e8e 30\uff0c\u4e24\u4e24\u95f4\u6709\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\n\n### \u8f93\u51fa\u63cf\u8ff0\n\n\u8f93\u51fa\u5206\u4e3a\u4e24\u884c\u3002\u7b2c\u4e00\u884c\u662f\u6570\u7ec4 A\uff0c\u4e24\u4e24\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\uff0c\u4fdd\u7559\u4e24\u4f4d\u5c0f\u6570\uff0c\u7b2c\u4e8c\u884c\u662f\u6570\u7ec4 B \u6bcf\u4e00\u4e2a\u6570\u4e58\u4e0a2\u7684\u7ed3\u679c\uff0c\u4e24\u4e24\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u3002\n\n### \u6837\u4f8b\u8f93\u5165\n\n```\n5\n3.605 7.4189 1.5 3.14159 4.0\n35 92 51 65 8 42 88\n```\n\n### \u6837\u4f8b\u8f93\u51fa\n\n```\n3.60 7.42 1.50 3.14 4.00\n70 184 102 130 16 84 176\n```\n\n### \u63d0\u793a\n\n#### Python3\n\n\u4e0a\u4e00\u9898\u4e2d\uff0c\u6211\u4eec\u5bf9\u6bcf\u4e00\u4e2a\u6570\u636e\u5206\u522b\u5904\u7406\uff0c\u5728\u8fd9\u9053\u9898\u4e2d\u663e\u7136\u662f\u4e0d\u5408\u9002\u7684\uff0c\u6211\u4eec\u5e94\u8be5\u8003\u8651\u6279\u91cf\u8bfb\u53d6\u548c\u8f93\u51fa\u4e00\u7ec4\u6570\u636e\uff0c\u6240\u4ee5\u3002\u3002\u3002\u7528\u5faa\u73af\uff1f\u4e0d\uff0cPython \u63d0\u4f9b\u4e86\u66f4\u65b9\u4fbf\u7684\u65b9\u5f0f\uff1a`\u5217\u8868\u751f\u6210\u5f0f` \u548c `map()`\u3002\n\n\u6bd4\u5982\u53ef\u4ee5\u4f7f\u7528 `\u5217\u8868\u751f\u6210\u5f0f` \u5c06\u4e00\u7ec4\u8f93\u5165\u8f6c\u4e3a\u6d6e\u70b9\u6570\u5217\u8868\uff1a\n\n```python\na = [float(i) for i in input().split()]\n```\n\n\u6216\u8005\u4f7f\u7528 `map()` \uff1a\n\n```python\na = map(float, input().split())\n```\n\n\u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u5728 Python3 \u4e2d\uff0c`map()` \u8fd4\u56de\u7684\u662f\u4e00\u4e2a\u53ef\u8fed\u4ee3\u4f46\u4e0d\u53ef\u968f\u673a\u8bbf\u95ee\u7684 map \u5bf9\u8c61\uff0c\u5982\u679c\u60f3\u8981\u968f\u673a\u8bbf\u95ee\uff0c\u4f60\u53ef\u4ee5\u5c06 map \u8f6c\u4e3a\u4e00\u4e2a\u5217\u8868\uff1a `list(map())`\u3002\n\n\u672c\u9898\u7684\u53e6\u4e00\u4e2a\u96be\u70b9\u662f\u5982\u4f55\u5b9e\u73b0\u8f93\u51fa\u4e00\u884c\u4e24\u4e24\u7528\u7a7a\u683c\u9694\u5f00\u7684\u6570\u7ec4\u3002\u4e3b\u8981\u6709\u4e24\u79cd\u65b9\u5f0f\uff0c\u4e00\u662f\u5148\u5c06\u6570\u7ec4\u683c\u5f0f\u5316\u4e3a\u5b57\u7b26\u4e32\uff1a\n\n```python\nprint(' '.join(map('{:.2f}'.format, a)))\n```\n\n\u7b2c\u4e8c\u79cd\u65b9\u5f0f\u662f\u5229\u7528 `print()` \u672c\u8eab\u7684\u7279\u6027\uff0c\u5b83\u53ef\u4ee5\u63a5\u53d7\u591a\u4e2a\u53c2\u6570\uff0c\u7136\u540e\u4e24\u4e24\u95f4\u7528\u4e00\u4e2a\u7a7a\u683c\u9694\u5f00\u8f93\u51fa\u3002\u6240\u4ee5\u4f60\u53ef\u4ee5\u5c06\u4e00\u4e2a**\u53ef\u8fed\u4ee3\u5bf9\u8c61**\u4f7f\u7528 `*` \u5206\u89e3\u4e3a `print()` \u7684\u4e00\u4e2a\u4e2a\u53c2\u6570\uff1a\n\n```python\nprint(*map('{:.2f}'.format, a))\n```\n\n#### C\n\n\u8bfb\u53d6\u6570\u7ec4 A\uff0c\u6211\u4eec\u53ea\u9700\u8981\u6839\u636e\u8f93\u5165\u7684\u6570\u7ec4\u5927\u5c0f n\uff0c\u5faa\u73af\u8bfb\u53d6\u5373\u53ef\uff1a\n\n```c\nfor (int i = 0; i < n; i++)\n    scanf(\"%lf\", &a[i]);\n```\n\n\u8f93\u51fa\u7684\u65f6\u5019\uff0c\u6211\u4eec\u5219\u9700\u8981**\u8003\u8651\u5230\u6700\u540e\u4e00\u4e2a\u6570\u636e\u540e\u6ca1\u6709\u7a7a\u683c\uff0c\u800c\u662f\u6362\u884c**\uff1a\n\n```c\nfor (int i = 0; i < n; i++)\n    printf(\"%.2lf%s\", a[i], i < n-1 ? \" \" : \"\\n\");\n```\n\n\u800c\u5bf9\u4e8e\u6570\u7ec4 B\uff0c\u56e0\u4e3a\u957f\u5ea6\u672a\u77e5\uff0c\u6240\u4ee5\u6211\u4eec\u9700\u8981\u5faa\u73af\u8bfb\u53d6\u5224\u65ad\u662f\u5426\u5230\u8fbe\u884c\u5c3e\uff0c\u8f93\u51fa\u5219\u4e00\u6837\uff1a\n\n```c++\nwhile(scanf(\"%d\", &b[n]) != EOF)\n    ++n;\n```\n\n#### C++\n\nA \u6570\u7ec4\u7684\u8f93\u5165\u548c C \u7c7b\u4f3c\uff0c\u53d7\u9650\u4e8e\u7bc7\u5e45\uff0c\u8fd9\u91cc\u5c31\u4e0d\u8d34\u4ee3\u7801\u4e86\u3002B \u6570\u7ec4\u7684\u8bfb\u53d6\u65b9\u5f0f\u5219\u548c C \u7c7b\u4f3c\uff1a\n\n```c++\nwhile (cin >> b[n])\n    ++n;\n```\n\n#### Java\n\nJava \u6709\u5f88\u591a\u8bfb\u53d6\u548c\u8f93\u51fa\u6570\u7ec4\u7684\u7528\u6cd5\uff0c\u8fd9\u91cc\u53ea\u5199 B \u6570\u7ec4\u57fa\u672c\u7684\u8bfb\u53d6\u65b9\u5f0f\uff1a\n\n```java\nwhile (scanner.hasNext())\n    b[n++] = scanner.nextInt();\n```\n",
    "templateCode": "",
    "sourceCode": "n = int(input())\na = map(float, input().split())\nprint(*map('{:.2f}'.format, a))\nb = map(int, input().split())\nprint(*map(lambda x: x*2, b))",
    "lang": "Python3",
    "testCases": [
        {
            "input": "5\n3.605 7.4189 1.5 3.14159 4.0\n35 92 51 65 8 42 88",
            "output": "3.60 7.42 1.50 3.14 4.00\n70 184 102 130 16 84 176\n"
        },
        {
            "input": "10\n5.673417370906426 6.871750699256066 24.188901283654367 17.822144488541944 4.640691572949973 40.97842666711179 19.75692711519771 17.167844275012715 20.933437704205357 5.851288040274694\n-75 85 -41 35 42 82 -48 -37 85 97 -12 87 40 -100 -50 34",
            "output": "5.67 6.87 24.19 17.82 4.64 40.98 19.76 17.17 20.93 5.85\n-150 170 -82 70 84 164 -96 -74 170 194 -24 174 80 -200 -100 68\n"
        },
        {
            "input": "11\n20.190119797062916 45.892020547935665 23.988000113122705 12.11026355498866 4.488669060556263 25.78484496666733 32.54808392433818 5.349312878186601 26.24272953681757 1.8670736353208282 30.48910469015451\n-62 -34 28 33 92 -74 93 -98 -3 -16",
            "output": "20.19 45.89 23.99 12.11 4.49 25.78 32.55 5.35 26.24 1.87 30.49\n-124 -68 56 66 184 -148 186 -196 -6 -32\n"
        }
    ]
}