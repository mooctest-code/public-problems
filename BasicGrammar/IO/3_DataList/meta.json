{
    "title": "读取和输出一个数组",
    "desc": "### 题目描述\n\n在上一题中，我们读取和输出了一行中的几个数据，数量少，单独对每一个数据进行读取和输出是方便的，但是如果数量变多了呢，如果没有说明数量呢？\n\n### 输入描述\n\n> 默认 “数组” 和 “列表” 表示的是一个意思，都是指一组数据。\n\n第一行是一个正整数 N (0 < N < 30)，表示数组的长度\n\n第二行是数组 A，有 N 个浮点数，两两间有一个空格隔开\n\n第三行是数组 B，有 M 个整数，M 未知但小于 30，两两间有一个空格隔开\n\n### 输出描述\n\n输出分为两行。第一行是数组 A，两两间用一个空格隔开，保留两位小数，第二行是数组 B 每一个数乘上2的结果，两两间用一个空格隔开。\n\n### 测试样例\n\n#### 样例1: 输入-输出\n\n```\n5\n3.605 7.4189 1.5 3.14159 4.0\n35 92 51 65 8 42 88\n```\n\n```\n3.60 7.42 1.50 3.14 4.00\n70 184 102 130 16 84 176\n```\n\n### 提示\n\n#### Python3\n\n上一题中，我们对每一个数据分别处理，在这道题中显然是不合适的，我们应该考虑批量读取和输出一组数据，所以。。。用循环？不，Python 提供了更方便的方式：`列表生成式` 和 `map()`。\n\n比如可以使用 `列表生成式` 将一组输入转为浮点数列表：\n\n```python\na = [float(i) for i in input().split()]\n```\n\n或者使用 `map()` ：\n\n```python\na = map(float, input().split())\n```\n\n需要注意的是，在 Python3 中，`map()` 返回的是一个可迭代但不可随机访问的 map 对象，如果想要随机访问，你可以将 map 转为一个列表： `list(map())`。\n\n本题的另一个难点是如何实现输出一行两两用空格隔开的数组。主要有两种方式，一是先将数组格式化为字符串：\n\n```python\nprint(' '.join(map('{:.2f}'.format, a)))\n```\n\n第二种方式是利用 `print()` 本身的特性，它可以接受多个参数，然后两两间用一个空格隔开输出。所以你可以将一个**可迭代对象**使用 `*` 分解为 `print()` 的一个个参数：\n\n```python\nprint(*map('{:.2f}'.format, a))\n```\n\n#### C\n\n读取数组 A，我们只需要根据输入的数组大小 n，循环读取即可：\n\n```c\nfor (int i = 0; i < n; i++)\n    scanf(\"%lf\", &a[i]);\n```\n\n输出的时候，我们则需要**考虑到最后一个数据后没有空格，而是换行**：\n\n```c\nfor (int i = 0; i < n; i++)\n    printf(\"%.2lf%s\", a[i], i < n-1 ? \" \" : \"\\n\");\n```\n\n而对于数组 B，因为长度未知，所以我们需要循环读取判断是否到达行尾，输出则一样：\n\n```c++\nwhile(scanf(\"%d\", &b[n]) != EOF)\n    ++n;\n```\n\n#### C++\n\nA 数组的输入和 C 类似，受限于篇幅，这里就不贴代码了。B 数组的读取方式则和 C 类似：\n\n```c++\nwhile (cin >> b[n])\n    ++n;\n```\n\n#### Java\n\nJava 有很多读取和输出数组的用法，这里只写 B 数组基本的读取方式：\n\n```java\nwhile (scanner.hasNext())\n    b[n++] = scanner.nextInt();\n```\n",
    "templateCode": "",
    "sourceCode": "n = int(input())\na = map(float, input().split())\nprint(*map('{:.2f}'.format, a))\nb = map(int, input().split())\nprint(*map(lambda x: x*2, b))",
    "lang": "Python3",
    "testCases": [
        {
            "input": "5\n3.605 7.4189 1.5 3.14159 4.0\n35 92 51 65 8 42 88\n",
            "output": "3.60 7.42 1.50 3.14 4.00\n70 184 102 130 16 84 176\n"
        },
        {
            "input": "10\n5.673417370906426 6.871750699256066 24.188901283654367 17.822144488541944 4.640691572949973 40.97842666711179 19.75692711519771 17.167844275012715 20.933437704205357 5.851288040274694\n-75 85 -41 35 42 82 -48 -37 85 97 -12 87 40 -100 -50 34\n",
            "output": "5.67 6.87 24.19 17.82 4.64 40.98 19.76 17.17 20.93 5.85\n-150 170 -82 70 84 164 -96 -74 170 194 -24 174 80 -200 -100 68\n"
        },
        {
            "input": "11\n20.190119797062916 45.892020547935665 23.988000113122705 12.11026355498866 4.488669060556263 25.78484496666733 32.54808392433818 5.349312878186601 26.24272953681757 1.8670736353208282 30.48910469015451\n-62 -34 28 33 92 -74 93 -98 -3 -16\n",
            "output": "20.19 45.89 23.99 12.11 4.49 25.78 32.55 5.35 26.24 1.87 30.49\n-124 -68 56 66 184 -148 186 -196 -6 -32\n"
        }
    ],
    "simple_desc": "一行数组的读取和输出",
    "difficulty": "2",
    "tag": "输入输出-标准流|函数-参数传递|生成-列表生成式|序列操作-map()|字符串-内置函数-join()",
    "author": "谢子聪"
}