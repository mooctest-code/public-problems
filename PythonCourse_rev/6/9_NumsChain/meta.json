{
    "title": "平方和数字链",
    "desc": "### 题目描述\n\n将一个正整数所有数字的平方相加可得到一个新的数，不断重复这个过程直到新的数已经在之前出现过，这样构成了一条数字链。 例如：`1->1`， `89->145->42->20->4->16->37->58->89`。理论上证明了从任一正整数开始，平方和数字链最终都会到达 1 或 89，因此寻找某正整数的平方和数字链到 1 或 89 即可。\n自定义函数 numsChain(num)，寻找从 num 到 1或 89 的平方和数字链中的所有数并将结果返回。\n\n### 输入描述\n\n输入为一个正整数 num\n\n### 输出描述\n\n输出这个整数到 1 或 89 的平方和数字链\n\n### 测试样例\n\n#### 样例1: 输入-输出\n\n```\n1\n```\n\n```\n1->1\n```\n\n#### 样例2: 输入-输出\n\n```\n89\n```\n\n```\n89->145->42->20->4->16->37->58->89\n```\n\n",
    "templateCode": "def numsChain(num: int):\n    # num 为初始的正整数\n    # 返回从 num 到 1或89 的平方和数字链\n    chain = []\n    return chain\n\n\nnum = int(input())\nprint('->'.join(map(str, numsChain(num))))\n",
    "sourceCode": "'''TESTCASE\n\n\ndef square(num: int):\n    return sum(map(lambda x: int(x)**2, str(num)))\n\n\ndef numsChain(num: int):\n    chain = [num, square(num)]\n    while chain[-1] not in (1, 89):\n        chain.append(square(chain[-1]))\n    return chain\n\n\nnum = int(input())\nprint('->'.join(map(str, numsChain(num))))\n",
    "lang": "Python3",
    "testCases": [
        {
            "input": "1\n",
            "output": "1->1\n"
        },
        {
            "input": "89\n",
            "output": "89->145->42->20->4->16->37->58->89\n"
        },
        {
            "input": "23\n",
            "output": "23->13->10->1\n"
        },
        {
            "input": "14\n",
            "output": "14->17->50->25->29->85->89\n"
        },
        {
            "input": "6789\n",
            "output": "6789->230->13->10->1\n"
        }
    ],
    "simple_desc": "给定正整数，求它的平方和数字链",
    "difficulty": "2",
    "tag": "数学问题",
    "author": "张莉"
}