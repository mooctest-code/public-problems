{
    "title": "分层抽样",
    "desc": "### 题目描述\n\n分层抽样先按对观察指标影响较大的某种特征，将总体分为若干个类别（称为层），再从每一层内随机抽取一定数量的个体，组成样本。\n\n在机器学习中，我们希望训练时各个目标分类下的数据是均衡的，因为在不均衡的分类下，分类器只要偏向预测数量多的分类就可以获得很好的准确率，这样的分类器是没有价值的。而解决数据不均衡问题的其中一种简单方法就是**对数据进行分层抽样**，也称为下采样。\n\n现给定某分类数据集，请你使用 pandas 的 `sample(random_state=0)` 将每一个目标分类的数据数量都分层抽样到与最小数量的分类的数量。\n\n### 输入描述\n\n输入为数据集的名称。\n\n### 输出描述\n\n输出该数据集分层抽样后前三个特征的 `describe()`。\n\n### 测试样例\n\n#### 样例1: 输入-输出\n\n```\niris\n```\n\n```\n       sepal length (cm)  sepal width (cm)  petal length (cm)\ncount         150.000000        150.000000         150.000000\nmean            5.843333          3.057333           3.758000\nstd             0.828066          0.435866           1.765298\nmin             4.300000          2.000000           1.000000\n25%             5.100000          2.800000           1.600000\n50%             5.800000          3.000000           4.350000\n75%             6.400000          3.300000           5.100000\nmax             7.900000          4.400000           6.900000\n```\n\n### 说明\n\n请将目标分类以 `target` 为名加入到 DataFrame 中。\n\n",
    "templateCode": "from sklearn import datasets\nimport pandas as pd\n\n\ndef stratifiedSample(df: pd.DataFrame) -> pd.DataFrame:\n    # value_counts, groupby\n    # sample(n=, random_state=0)\n    return  # TODO\n\n\ndataset = eval('datasets.load_{}()'.format(input()))\n\nfeature_names = dataset['feature_names']\n\ndf = pd.DataFrame(data=dataset['data'],\n                  columns=feature_names)\ndf['target'] = dataset['target']\n\nprint(stratifiedSample(df)[feature_names[:3]].describe())\n",
    "sourceCode": "\nfrom sklearn import datasets\nimport pandas as pd\n\n\ndef stratifiedSample(df: pd.DataFrame) -> pd.DataFrame:\n    _min = min(df['target'].value_counts())\n    return df.groupby('target').apply(lambda g: g.sample(_min, random_state=0))\n\n\ndataset = eval('datasets.load_{}()'.format(input()))\n\nfeature_names = dataset['feature_names']\n\ndf = pd.DataFrame(data=dataset['data'],\n                  columns=feature_names)\ndf['target'] = dataset['target']\n\nprint(stratifiedSample(df)[feature_names[:3]].describe())\n",
    "lang": "Python3",
    "testCases": [
        {
            "input": "iris\n",
            "output": "       sepal length (cm)  sepal width (cm)  petal length (cm)\ncount         150.000000        150.000000         150.000000\nmean            5.843333          3.057333           3.758000\nstd             0.828066          0.435866           1.765298\nmin             4.300000          2.000000           1.000000\n25%             5.100000          2.800000           1.600000\n50%             5.800000          3.000000           4.350000\n75%             6.400000          3.300000           5.100000\nmax             7.900000          4.400000           6.900000\n"
        },
        {
            "input": "wine\n",
            "output": "          alcohol  malic_acid         ash\ncount  144.000000  144.000000  144.000000\nmean    13.031458    2.401875    2.375347\nstd      0.810850    1.099535    0.275196\nmin     11.030000    0.740000    1.360000\n25%     12.370000    1.637500    2.230000\n50%     13.075000    1.900000    2.365000\n75%     13.682500    3.170000    2.557500\nmax     14.830000    5.650000    3.230000\n"
        },
        {
            "input": "breast_cancer\n",
            "output": "       mean radius  mean texture  mean perimeter\ncount   424.000000    424.000000      424.000000\nmean     14.813972     19.814316       96.749057\nstd       3.710883      4.399382       25.624459\nmin       6.981000      9.710000       43.790000\n25%      12.092500     16.792500       78.062500\n50%      14.000000     19.625000       91.405000\n75%      17.367500     22.307500      114.250000\nmax      28.110000     39.280000      188.500000\n"
        }
    ],
    "simple_desc": "分层抽样给定数据集",
    "difficulty": "2",
    "tag": "数据抽样|pandas",
    "author": "谢子聪"
}