{
    "title": "加载数据集",
    "desc": "### 题目描述\n\n[**scikit-learn**](scikit-learn.org)（sklearn） 是常用的 Python 机器学习库。如下图所示，它可以做非常多的事。\n\n![](https://img-blog.csdnimg.cn/2018111720571969.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L1hpYW9ZaV9Fcmlj,size_16,color_FFFFFF,t_70)\n\n这次我们只用它做一件小事。sklearn 自带了一些经典标准数据集的小样本。比如波士顿房价数据集（boston）、鸢尾花数据集（iris）、数字识别数据集（digits）、葡萄酒质量数据集（wine）等等。\n\n使用 `datasets.load_xxx()` 即可加载指定的 xxx 数据集。返回的是一个字典，包括：\n\n| 键            | 描述                                                         |\n| ------------- | ------------------------------------------------------------ |\n| data          | 特征集，每行为一个数据项，每个数据项为一个特征列表           |\n| feature_names | 特征的名称                                                   |\n| target        | 预测目标，可能是连续型（用于回归）也可能是分类型（用于分类） |\n| target_names  | 目标的名称                                                   |\n| DESCR         | 数据集描述                                                   |\n| filename      |                                                              |\n\n**任务一：**给定数据集的名称，请你加载该数据集，并输出前三个特征名称和前五个数据项的前三个特征。\n\n[**Pandas** ](https://pandas.pydata.org/) 是常用的 Python 数据分析库，它可以做非常多的事。这次我们也只用它做一件小事：将上述数据集转换成 pandas 的 DataFrame。\n\n**任务二**：使用 DataFrame 的 `head()` 输出上述数据集的前五个数据项的前三个特征。 \n\n### 输入描述\n\n输入为数据集的名称。\n\n### 输出描述\n\n输出任务一、任务二的结果。每个任务前输出一行 `Task x:`，两两任务间加一个空行。任务一每行元素之间使用制表符隔开。\n\n### 测试样例\n\n#### 样例1: 输入-输出\n\n```\nwine\n```\n\n```\nTask 1:\nalcohol\tmalic_acid\tash\n14.23\t1.71\t2.43\n13.2\t1.78\t2.14\n13.16\t2.36\t2.67\n14.37\t1.95\t2.5\n13.24\t2.59\t2.87\n\nTask 2:\n   alcohol  malic_acid   ash\n0    14.23        1.71  2.43\n1    13.20        1.78  2.14\n2    13.16        2.36  2.67\n3    14.37        1.95  2.50\n4    13.24        2.59  2.87\n```\n\n### 提示\n\n1. `eval`\n2. `DataFrame(data=, columns=)`",
    "templateCode": "",
    "sourceCode": "\nfrom sklearn import datasets\nimport pandas as pd\n\nname = input()\n\ndataset = eval('datasets.load_' + name + '()')\nfeature_names = dataset['feature_names']\ndata = dataset['data']\n\nprint('Task 1:')\nprint(*feature_names[:3], sep='\\t')\nfor item in data[:5]:\n    print(*item[:3], sep='\\t')\n\nprint()\n\ndf = pd.DataFrame(data=data, columns=feature_names)\n\nprint('Task 2:')\nprint(df[feature_names[:3]].head())\n",
    "lang": "Python3",
    "testCases": [
        {
            "input": "wine\n",
            "output": "Task 1:\nalcohol\tmalic_acid\tash\n14.23\t1.71\t2.43\n13.2\t1.78\t2.14\n13.16\t2.36\t2.67\n14.37\t1.95\t2.5\n13.24\t2.59\t2.87\n\nTask 2:\n   alcohol  malic_acid   ash\n0    14.23        1.71  2.43\n1    13.20        1.78  2.14\n2    13.16        2.36  2.67\n3    14.37        1.95  2.50\n4    13.24        2.59  2.87\n"
        },
        {
            "input": "boston\n",
            "output": "Task 1:\nCRIM\tZN\tINDUS\n0.00632\t18.0\t2.31\n0.02731\t0.0\t7.07\n0.02729\t0.0\t7.07\n0.03237\t0.0\t2.18\n0.06905\t0.0\t2.18\n\nTask 2:\n      CRIM    ZN  INDUS\n0  0.00632  18.0   2.31\n1  0.02731   0.0   7.07\n2  0.02729   0.0   7.07\n3  0.03237   0.0   2.18\n4  0.06905   0.0   2.18\n"
        },
        {
            "input": "iris\n",
            "output": "Task 1:\nsepal length (cm)\tsepal width (cm)\tpetal length (cm)\n5.1\t3.5\t1.4\n4.9\t3.0\t1.4\n4.7\t3.2\t1.3\n4.6\t3.1\t1.5\n5.0\t3.6\t1.4\n\nTask 2:\n   sepal length (cm)  sepal width (cm)  petal length (cm)\n0                5.1               3.5                1.4\n1                4.9               3.0                1.4\n2                4.7               3.2                1.3\n3                4.6               3.1                1.5\n4                5.0               3.6                1.4\n"
        },
        {
            "input": "breast_cancer\n",
            "output": "Task 1:\nmean radius\tmean texture\tmean perimeter\n17.99\t10.38\t122.8\n20.57\t17.77\t132.9\n19.69\t21.25\t130.0\n11.42\t20.38\t77.58\n20.29\t14.34\t135.1\n\nTask 2:\n   mean radius  mean texture  mean perimeter\n0        17.99         10.38          122.80\n1        20.57         17.77          132.90\n2        19.69         21.25          130.00\n3        11.42         20.38           77.58\n4        20.29         14.34          135.10\n"
        }
    ],
    "simple_desc": "加载 sklearn 中自带的数据集",
    "difficulty": "1",
    "tag": "sklearn-datasets|数据集",
    "author": "谢子聪"
}