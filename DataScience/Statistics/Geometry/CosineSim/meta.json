{
    "title": "余弦相似度",
    "desc": "### 题目描述\n\n余弦相似度用向量空间中两个向量夹角的余弦值作为衡量两个个体间差异的大小。余弦值越接近 1，就表明夹角越接近 0 度，也就是两个向量越相似。\n\n![](https://gss0.bdstatic.com/94o3dSag_xI4khGkpoWK1HF6hhy/baike/s%3D394/sign=20b5db49b7a1cd1101b674298d13c8b0/ac4bd11373f0820282c6ae4646fbfbedab641b76.jpg)\n\n相似地，可以把余弦相似度应用于高维数据的相似度计算上。给定两个高维数据，它们有相同数量的多个连续型特征，试计算它们的余弦相似度。\n\n### 输入描述\n\n输入分为两行。第一行为第一个数据的特征，两两间用空格隔开；第二行为第二个数据的特征，两两间用空格隔开。\n\n### 输出描述\n\n输出这两个数据的余弦相似度，结果保留四位小数。\n\n### 测试样例\n\n#### 样例1: 输入-输出\n\n```\n0 1 0 1\n1 1 0 1\n```\n\n```\n0.8165\n```\n\n#### 样例2: 输入-输出\n\n```\n8.99 1.78 -7.53 -1.44 -1.79 -2.58\n4.1 3.22 0.37 -5.0 3.49 0.76\n```\n\n```\n0.3893\n```\n\n",
    "templateCode": "",
    "sourceCode": "\nimport numpy as np\n\n\ndef cosine(x, y):\n    v1 = np.array(x)\n    v2 = np.array(y)\n    n1 = np.linalg.norm(v1)\n    n2 = np.linalg.norm(v2)\n    return v1 @ v2 / (n1 * n2)\n\n\nx = tuple(map(float, input().split()))\ny = tuple(map(float, input().split()))\n\nprint('{:.4f}'.format(cosine(x, y)))\n",
    "lang": "Python3",
    "testCases": [
        {
            "input": "0 1 0 1\n1 1 0 1\n",
            "output": "0.8165\n"
        },
        {
            "input": "8.99 1.78 -7.53 -1.44 -1.79 -2.58\n4.1 3.22 0.37 -5.0 3.49 0.76\n",
            "output": "0.3893\n"
        },
        {
            "input": "1 2 3\n4 5 6\n",
            "output": "0.9746\n"
        },
        {
            "input": "6.08 -8.48 6.63 8.52 -0.53 -7.97 -1.0 6.72 -3.05 5.84\n-4.28 -6.31 -6.78 2.28 -0.71 -2.2 -2.23 5.26 3.3 9.25\n",
            "output": "0.3337\n"
        },
        {
            "input": "9.12 3.92 2.73 4.02 3.74 3.76 0.09 3.37 8.2 8.72\n0.19 1.32 5.57 0.78 5.22 2.41 8.74 9.41 4.95 6.85\n",
            "output": "0.6142\n"
        }
    ],
    "simple_desc": "计算两个数据的余弦相似度",
    "difficulty": "2",
    "tag": "数据度量-余弦相似度",
    "author": "谢子聪"
}